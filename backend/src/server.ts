import express from 'express';
import http from 'http';
import WebSocket, { WebSocketServer } from 'ws';
import { v4 as uuidv4 } from 'uuid';
import path from 'path';
import { fileURLToPath } from 'url';

import {
  ClientMessage, ClientMessageType, ServerMessageType, Player,
  CreateRoomPayload, JoinRoomPayload, SendChatMessagePayload, PlayerActionPayload
} from './types';

import {
  handleCreateRoom, handleJoinRoom, handleDisconnect,
  broadcastToRoom, getRoom, sanitizeRoomForClient,
  addChatMessageToRoom, findRoomByPlayerId
} from './roomManager';

import {
  handleStartGame, handleKickOpenDoor, handleResolveDoorCard,
  handlePlayCardFromHand, handleEndTurn, handleLootRoom
} from './gameLogic';

const app = express();
const server = http.createServer(app);
const wss = new WebSocketServer({ server });

// üëá –î–æ–±–∞–≤–ª—è–µ–º —ç—Ç–∏ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã __dirname –≤ ES-–º–æ–¥—É–ª—è—Ö
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// ‚úÖ –û—Ç–¥–∞—ë–º —Å–æ–±—Ä–∞–Ω–Ω—ã–π —Ñ—Ä–æ–Ω—Ç (vite build)
app.use(express.static(path.join(__dirname, '../../dist')));

app.get('*', (_, res) => {
  res.sendFile(path.join(__dirname, '../../dist/index.html'));
});

const PORT = Number(process.env.PORT) || 8080;

wss.on('connection', (ws: WebSocket) => {
  const clientId = uuidv4();
  console.log(`–ö–ª–∏–µ–Ω—Ç ${clientId} –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è`);

  (ws as any).clientId = clientId;

  ws.on('message', (message: string) => {
    try {
      const clientMessage = JSON.parse(message) as ClientMessage;
      console.log(`–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${clientId}:`, clientMessage);

      clientMessage.playerId = clientId;

      switch (clientMessage.type) {
        case ClientMessageType.CREATE_ROOM:
          handleCreateRoom(ws, clientMessage.payload as CreateRoomPayload);
          break;
        case ClientMessageType.JOIN_ROOM:
          handleJoinRoom(ws, clientMessage.payload as JoinRoomPayload);
          break;
        case ClientMessageType.SEND_CHAT_MESSAGE: {
          const room = clientMessage.roomId ? getRoom(clientMessage.roomId) : null;
          const player = room?.players.find(p => p.id === clientMessage.playerId);
          if (room && player) {
            const chatPayload = clientMessage.payload as SendChatMessagePayload;
            addChatMessageToRoom(room.id, player, chatPayload.text);
          } else {
            ws.send(JSON.stringify({
              type: ServerMessageType.ERROR,
              payload: { message: "–ö–æ–º–Ω–∞—Ç–∞ –∏–ª–∏ –∏–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —á–∞—Ç–∞." }
            }));
          }
          break;
        }
        case ClientMessageType.START_GAME:
          handleStartGame(clientMessage.roomId!, clientMessage.playerId!);
          break;
        case ClientMessageType.KICK_OPEN_DOOR:
          handleKickOpenDoor(clientMessage.roomId!, clientMessage.playerId!);
          break;
        case ClientMessageType.RESOLVE_DOOR_CARD: {
          const payload = clientMessage.payload as PlayerActionPayload;
          if (payload.resolutionAction) {
            handleResolveDoorCard(clientMessage.roomId!, clientMessage.playerId!, payload.resolutionAction);
          }
          break;
        }
        case ClientMessageType.PLAY_CARD_FROM_HAND: {
          const payload = clientMessage.payload as PlayerActionPayload;
          if (payload.cardId) {
            handlePlayCardFromHand(clientMessage.roomId!, clientMessage.playerId!, payload.cardId);
          }
          break;
        }
        case ClientMessageType.END_TURN:
          handleEndTurn(clientMessage.roomId!, clientMessage.playerId!);
          break;
        case ClientMessageType.LOOT_ROOM:
          handleLootRoom(clientMessage.roomId!, clientMessage.playerId!);
          break;
        default:
          console.warn(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: ${clientMessage.type}`);
          ws.send(JSON.stringify({
            type: ServerMessageType.ERROR,
            payload: { message: `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: ${clientMessage.type}` }
          }));
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', message, error);
      ws.send(JSON.stringify({
        type: ServerMessageType.ERROR,
        payload: { message: "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è." }
      }));
    }
  });

  ws.on('close', () => {
    console.log(`–ö–ª–∏–µ–Ω—Ç ${clientId} –æ—Ç–∫–ª—é—á–∏–ª—Å—è`);
    handleDisconnect(ws);
  });

  ws.on('error', (error) => {
    console.error(`–û—à–∏–±–∫–∞ WebSocket —É –∫–ª–∏–µ–Ω—Ç–∞ ${clientId}:`, error);
  });

  ws.send(JSON.stringify({
    type: ServerMessageType.NOTIFICATION,
    payload: {
      message: `–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Å–µ—Ä–≤–µ—Ä—É. –í–∞—à ID: ${clientId}`,
      level: 'info'
    }
  }));
});

server.listen(PORT, '0.0.0.0', () => {
  console.log(`–°–µ—Ä–≤–µ—Ä Dungeon Delvers Online –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});